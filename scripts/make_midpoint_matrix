#!/usr/bin/env python

#
# make_midpoint_matrix: Given a BAM file containing alignments from an
# ATAC-seq experiment and a BED file of motifs, creates a matrix of the
# fragment midpoints around the motifs.
#
# Copyright 2015 Stephen Parker
#
# Licensed under Version 3 of the GPL or any later version
#

from __future__ import print_function

import argparse
import collections
import decimal
import functools
import logging
import multiprocessing
import multiprocessing.managers
import os
import signal
import sys
import time
import textwrap
import traceback

import atactk.command
import atactk.data
import atactk.metrics
import atactk.metrics.mid
import atactk.util


LOGGING_FORMAT = '%(levelname)s %(message)s'


def worker_init():
    signal.signal(signal.SIGINT, signal.SIG_IGN)


def parse_arguments():
    parser = argparse.ArgumentParser(
        prog='make_midpoint_matrix',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent("""

        Given a BAM file containing alignments from an ATAC-seq
        experiment and a BED file of motifs, creates a matrix of
        counts of the fragment midpoints around the motifs.

        BINNING
        =======

        Each motif in the BED file is scored for each of the given
        fragment length bins.

        {}

        INPUT
        =====

        BAM files just work.

        BED files mean different things to different people. We
        require a file of tab-separated values, where the first six
        fields (and their labels in the BED format documentation at
        https://genome.ucsc.edu/FAQ/FAQformat.html) are:

        1. The reference sequence name ('chrom'): text
        2. The feature start position ('chromStart'): integer
        3. The feature end position ('chromEnd'): integer
        4. The name of the feature ('name'): text
        5. The feature's score ('score'): number
        6. The feature's strand ('strand'): '+' or '-'

        Extra fields are ignored.

        OUTPUT
        ======

        You can request either discrete or aggregate output. Discrete
        output is intended to be usable as input to CENTIPEDE. After
        you've run CENTIPEDE, you can feed different parts of the
        resulting BED file back into this script and request aggregate
        output to produce a file suitable for plotting with one of our
        R scripts. As an example, we like to extract from the CENTIPEDE
        output all motifs with a posterior probability of binding greater
        than 0.99, and a random sampling of motifs with a posterior
        probability of less than 0.5. Plotting those provides a good
        visual inspection of the results.

        Each row of the discrete matrix represents the scores around a
        single motif from your input BED file. The positions reported
        depend on the resolution specified in the --bins argument. For
        example, specifying a resolution of 1 will result in single
        nucleotide resolution -- you'll get the score at each position
        in the extended region around the motif. Specifying 10 will
        report the sum of every 10 positions.

        Aggregate output reports absolute counts and counts divided by
        the number of motifs for all of your motifs at each position
        in the region around the motif, for each fragment size bin
        represented at that position.

        \0""".format('\n    '.join(atactk.command.parse_bins.__doc__.split('\n')[3:]).lstrip()))
    )
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-a', '--aggregate-output', dest='aggregate', action='store_true', help='Requests an aggregate matrix. See OUTPUT, below.')
    group.add_argument('-d', '--discrete-output', dest='discrete', action='store_true', help='Requests a discrete matrix. See OUTPUT, below.')

    parser.add_argument('-b', '--bins', dest='bins', type=atactk.command.parse_bins, required=True, help='A list of fragment size bin groups and their resolutions. See BINNING, below.')
    parser.add_argument('-F', '--exclude-flags', type=int, dest='exclude_flags', action='append', help='A SAM flag used to exclude alignments from the BAM file. More than one may be specified. Alignments matching any exclude flag will not be counted. The default is to exclude all unmapped reads/mates by filtering out any alignments with SAM flags 4 or 8 set.')
    parser.add_argument('-f', '--include-flags', type=int, dest='include_flags', action='append', help='A SAM flag that determines which alignments from the BAM file will be included in the counts. More than one may be specified. Any alignment matching any include flag will be counted. The default is to include properly paired and mapped reads by filtering for SAM flags 83, 99, 147, or 163.')
    parser.add_argument('-p', '--parallel', type=int, default=1, dest='parallel', help='The number of parallel scoring processes to use (default: 1).')
    parser.add_argument('-q', '--quality', type=int, default=30, dest='quality', help='The minimum mapping quality required for a read to be counted (default: 30).')
    parser.add_argument('-r', '--region-extension', type=int, default=100, dest='extension', help='The number of bases to score on either side of the motifs (default: 100).')
    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Requests more detailed output.')
    parser.add_argument('--version', action='version', version='%(prog)s {}'.format(atactk.__version__))

    parser.add_argument('alignments', metavar='BAM-file-of-aligned-reads', help='The indexed BAM file containing the aligned ATAC-seq reads.')
    parser.add_argument('motifs', metavar='BED-file-of-motifs', help='The BED file containing the motifs. Use "-" to read from standard input.')

    return parser.parse_args()


def print_discrete_matrix(scored_motifs):
    motif_count = 0
    for motif_count, (motif, row, tree) in enumerate(scored_motifs, 1):
        print(row)
    return motif_count


def print_aggregate_matrix(scored_motifs, aggregate_positions, bins):
    matrix = collections.defaultdict(            # position
        lambda: collections.defaultdict(int)     # fragment size bin
    )
    motif_count = 0

    # since the tree returned from atactk.metrics.mid.score_feature_with_midpoints is sparse, but we want to print a row for every
    # position in the extended region around the motif, we can't just iterate tree.items()
    for motif_count, (motif, row, tree) in enumerate(scored_motifs, 1):
        for position in aggregate_positions:
            for bin_group in bins:
                group_key = atactk.util.make_bin_group_key(bin_group)
                if position in tree:
                    count = tree[position].get(group_key, 0)
                else:
                    count = 0
                matrix[position][group_key] += count

    decimal_motif_count = decimal.Decimal(motif_count)
    print('Position\tFragmentSizeBin\tMidpointCount\tMidpointCountFraction')
    for position, fragment_size_bins in sorted(matrix.items()):
        for fragment_size_bin, count in sorted(fragment_size_bins.items(), key=lambda item: int(item[0].split('_')[0])):
            print('{}\t{}\t{:d}\t{}'.format(position, fragment_size_bin, count, count / decimal_motif_count))

    return motif_count


def make_midpoint_matrix(args):
    job_start = time.time()

    if args.include_flags:
        args.include_flags = sorted(set(args.include_flags))
    else:
        args.include_flags = [83, 99, 147, 163]

    if args.exclude_flags:
        args.exclude_flags = sorted(set(args.exclude_flags))
    else:
        args.exclude_flags = [4, 8]

    if args.parallel > 1:
        logger.info('Using {:d} concurrent scoring processes'.format(args.parallel))
    logger.info('Filtering alignments for quality >= {}, with flags {} and without flags {}'.format(args.quality, args.include_flags, args.exclude_flags))
    logger.info('Using these fragment size bins: {}'.format(args.bins))
    logger.info('Reading motifs from {}...'.format(args.motifs == '-' and 'standard input' or args.motifs))

    motifs = atactk.data.read_features(args.motifs, args.extension)

    motif_count = 0
    score = functools.partial(
        atactk.metrics.mid.score_feature_with_midpoints,
        args.alignments,
        args.bins,
        args.include_flags,
        args.exclude_flags,
        args.quality,
    )

    aggregate_positions = range(0 - args.extension, args.extension)
    pool = None

    try:
        logger.info('Making {} midpoint matrix...'.format(args.discrete and 'discrete' or 'aggregate'))
        pool = multiprocessing.Pool(processes=args.parallel, initializer=worker_init)
        scored_motifs = pool.imap(score, motifs, args.parallel)

        if args.discrete:
            motif_count = print_discrete_matrix(scored_motifs)
        elif args.aggregate:
            motif_count = print_aggregate_matrix(scored_motifs, aggregate_positions, args.bins)

        if not motif_count:
            logger.warn('No motifs were found in the BED input.')

        if args.verbose:
            logging.debug('Memory in use: {}'.format(atactk.util.memory_in_use()))

        logger.info('Processed {:.0f} feature{} in {}'.format(motif_count, motif_count == 1 and '' or 's', atactk.util.humanize_time(time.time() - job_start)))
    except KeyboardInterrupt:
        logger.info('Keyboard interrupt received in process {}.'.format(os.getpid()))

        if pool:
            if sys.version_info.major < 3:
                logger.warn('Interrupt handling in multiprocessing programs is not reliable before Python 3, so I may have to exit without cleaning up all worker processes. Sorry.')
                signal.signal(signal.SIGALRM, atactk.util.exit_forcefully)
                signal.alarm(10)

            logger.info('Telling worker processes to terminate...')
            pool.terminate()
            logger.info('Waiting for worker processes to terminate...')
            pool.join()
        logger.info('Exiting.')
        sys.exit(1)
    except Exception as e:
        logger.error(e)
        if args.verbose:
            traceback.print_exc(file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    args = parse_arguments()

    loglevel = args.verbose and logging.DEBUG or logging.INFO
    logging.basicConfig(level=loglevel, format=LOGGING_FORMAT)
    logger = logging.getLogger('make_midpoint_matrix')

    bins = sorted([b for bins in args.bins for b in bins])
    atactk.command.check_bin_resolutions(bins, args.extension)

    make_midpoint_matrix(args)
