#!/usr/bin/env python

#
# make_cut_matrix: Given a BAM file containing alignments from an
# ATAC-seq experiment and a BED file of motifs, creates a matrix of the
# transposition cuts around the motifs.
#
# Copyright 2015 The Parker Lab at the University of Michigan
#
# Licensed under Version 3 of the GPL or any later version
#

from __future__ import print_function

import argparse
import collections
import functools
import logging
import multiprocessing
import multiprocessing.managers
import signal
import sys
import time
import textwrap
import traceback

import atactk.command
import atactk.data
import atactk.metrics


LOGGING_FORMAT = '%(asctime)s %(levelname)s %(message)s'

def worker_init():
    signal.signal(signal.SIGINT, signal.SIG_IGN)


def humanize_time(seconds):
    s = ''
    days = hours = minutes = 0
    if seconds >= 86400:
        days = seconds // 86400
        seconds = seconds % 86400
        s += '{:.0f}d '.format(days)
    if seconds >= 3600:
        hours = seconds // 3600
        seconds = seconds % 3600
        s += '{:.0f}h '.format(hours)
    if seconds >= 60:
        minutes = seconds // 60
        seconds = seconds % 60
        s += '{:.0f}m '.format(minutes)
    if not s:
        s += '{:.2f}s'.format(seconds)
    return s


def parse_arguments():
    parser = argparse.ArgumentParser(
        prog='make_cut_matrix',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent("""

        Given a BAM file containing alignments from an ATAC-seq
        experiment and a BED file of motifs, creates a matrix of counts
        of the transposition cuts around the motifs.

        BINNING
        =======

        Each motif in the BED file is scored for each of the given
        template length bins. The bins are specified as a list of
        groups, each group comprising one or more bins, and ending with
        a resolution value, which controls how many individual cuts in
        the extended region around the motif are aggregated. Within the
        motif itself, we always count the cut points for each base. A
        complete example:

            (36-149 1) (150-224 225-324 2) (325-400 5)

        With a resolution of 1, every base in the extended region
        around motifs overlapping templates of length 36-149 would be
        scored independently; each base's cut count would be added to
        the matrix.

        The second group, for templates of length 150-224 or 225-324,
        with a resolution of 2, would result in every two bases in the
        extended region around motifs being added together. Then the
        aggregate scores of the two bins in the group would be summed,
        and the result would be added to the matrix.

        The last bin group, (325-400 5), with a resolution of 5, would
        also produce aggregate scores in the extended region, each
        being the sum of five bases' cut counts.

        To illustrate, assume these settings and an imaginary motif 5
        bases long, with a 10-base extended region on either side, and
        for the sake of example pretend that each template length bin
        had the same counts of cut points around the motif, shown
        here:

        extended region     motif     extended region
        ------------------- --------- -------------------
        0 1 2 3 3 4 4 4 4 5 9 2 0 2 7 5 4 4 4 4 3 3 2 1 0

        The scores for the first bin group, (36-149 1):

        extended region     motif     extended region
        ------------------- --------- -------------------
        0 1 2 3 3 4 4 4 4 5 9 2 0 2 7 5 4 4 4 4 3 3 2 1 0

        The scores for the first bin group, (150-224 225-324 2):

        e.r.      motif     e.r.
        --------- --------- ---------
        1 5 7 8 9 9 2 0 2 7 9 8 7 5 1

        The scores for the last bin group, (325-400 5):

        e.r. motif     e.r.
        ---- --------- ----
        9 21 9 2 0 2 7 21 9


        OUTPUT
        ======

        You can request either discrete or aggregate output. Discrete
        output is intended to be usable as input to CENTIPEDE. After
        you've run CENTIPEDE and intersected its output with peaks
        called on the ATAC-seq data, you can feed the resulting BED
        file back into this script and request aggregate output to
        produce a file suitable for plotting with out
        plot_aggregate_matrix.R script.

        Each row of the discrete matrix represents the cut point counts
        around a single motif from your input BED file. The positions
        reported depend on the resolution specified in the --bins
        argument. For example, specifying a resolution of 1 will
        result in single nucleotide resolution -- you'll get the count
        at each position in the extended region around the
        motif. Specifying 10 will report the sum of every 10 positions.

        Aggregate output reports absolute and average cut point counts
        for all of your motifs at each position in the region around the
        motif, for each strand and for each template size bin
        represented at that position.

        \0""")
    )
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-a', '--aggregate-output', dest='aggregate', action='store_true', help='Requests a matrix in which each row represents a position in the extended region and the average cut point count at that position across all motifs. See OUTPUT, below.')
    group.add_argument('-d', '--discrete-output', dest='discrete', action='store_true', help='Requests a matrix in which each row represents all the cut point counts around one motif. See OUTPUT, below.')

    parser.add_argument('-b', '--bins', dest='bins', type=atactk.command.parse_bins, required=True, help='A list of template size bin groups and their resolutions. See BINNING, below.')
    parser.add_argument('-F', '--exclude-flags', type=int, dest='exclude_flags', action='append', help='A SAM flag used to exclude alignments from the BAM file. More than one may be specified. Alignments matching any exclude flag will not be counted. The default is to exclude all unmapped reads/mates by filtering out any alignments with SAM flags 4 or 8 set.')
    parser.add_argument('-f', '--include-flags', type=int, dest='include_flags', action='append', help='A SAM flag that determines which alignments from the BAM file will be included in the counts. More than one may be specified. Any alignment matching any include flag will be counted. The default is to include properly paired and mapped reads by filtering for SAM flags 83, 99, 147, or 163.')
    parser.add_argument('-o', '--cut-point-offset', type=int, default=4, dest='cut_point_offset', help='The position of cut points relative to the ends of reads, as a number of bases (default: 4).')
    parser.add_argument('-p', '--parallel', type=int, default=1, dest='parallel', help='The number of parallel scoring processes to use (default: 1).')
    parser.add_argument('-q', '--quality', type=int, default=30, dest='quality', help='The minimum mapping quality required for a read to be counted (default: 30).')
    parser.add_argument('-r', '--region-extension', type=int, default=100, dest='extension', help='The number of bases to score on either side of the motifs (default: 100).')
    parser.add_argument('-s', '--reverse-motif-shift', type=int, default=0, dest='reverse_motif_shift', help='If supplied, the extended region around motifs on the reverse strand will be shifted upstream by this number of bases.')
    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Requests more detailed output.')
    parser.add_argument('--version', action='version', version='%%(prog)s %s' % atactk.__version__)

    parser.add_argument('alignments', help='The BAM file containing the aligned ATAC-seq reads.')
    parser.add_argument('motifs', help='The BED file containing the motifs.')

    return parser.parse_args()


def make_cut_matrix(args):
    job_start = time.time()

    if args.include_flags:
        args.include_flags = sorted(set(args.include_flags))
    else:
        args.include_flags = [83, 99, 147, 163]

    if args.exclude_flags:
        args.exclude_flags = sorted(set(args.exclude_flags))
    else:
        args.exclude_flags = [4, 8]

    loglevel = args.verbose and logging.DEBUG or logging.INFO
    logging.basicConfig(level=loglevel, format=LOGGING_FORMAT)
    logger = logging.getLogger('make_cut_matrix')

    if args.parallel > 1:
        logger.info('Using %s concurrent scoring processes' % args.parallel)
    logger.info('Filtering alignments for quality >= %s, with flags %s and without flags %s' % (args.quality, args.include_flags, args.exclude_flags))
    logger.info('Using these template size bins: %s' % args.bins)

    matrix = collections.defaultdict(                # position
        lambda: collections.defaultdict(             # template_size_bin
            lambda: collections.defaultdict(int)     # strand
        )
    )

    motif_count = None
    if logger.isEnabledFor(logging.DEBUG):
        logger.debug('Counting motifs...')
        start = time.time()
        motif_count = atactk.data.count_features(args.motifs)
        logger.debug('Motif count: {} (took {} seconds)'.format(motif_count, time.time() - start))

    logger.info('Loading motifs from {}...'.format(args.motifs))
    motifs = atactk.data.read_features(args.motifs, args.extension, args.reverse_motif_shift)

    score = functools.partial(
        atactk.metrics.score_feature,
        args.alignments,
        args.bins,
        args.include_flags,
        args.exclude_flags,
        args.quality,
        args.cut_point_offset
    )

    logger.info('Making cut point matrix...')
    try:
        if args.parallel > 1:
            pool = multiprocessing.Pool(processes=args.parallel, initializer=worker_init)
            results = pool.imap(score, motifs, args.parallel)
        else:
            results = (score(motif) for motif in motifs)

        interval = 1000
        start = time.time()
        for i, (row, tree) in enumerate(results):
            if all([i, logger.isEnabledFor(logging.DEBUG), motif_count is not None, i % interval == 0]):
                time_elapsed = time.time() - start
                rate = int(i / time_elapsed)
                seconds_left = (motif_count - i) / (float(i) / time_elapsed)
                if rate / interval > 1:
                    interval = rate / interval * interval
                logger.debug('Motif {} / {}, rate {}/s, should finish in {}'.format(i, motif_count, rate, humanize_time(seconds_left)))
            if args.discrete:
                print(row)
            elif args.aggregate:
                for position, template_size_bins in tree.items():
                    for template_size_bin, strands in template_size_bins.items():
                        for strand, count in strands.items():
                            matrix[position][template_size_bin][strand] += count
        if args.aggregate:
            motif_count = float(len(motifs))

            print('Position\tBin\tStrand\tCutPointCount\tAverageCutPointCount')
            for position, template_size_bins in sorted(matrix.items()):
                for template_size_bin, strands in template_size_bins.items():
                    for strand, count in strands.items():
                        print('%s\t%s\t%s\t%d\t%g' % (position, template_size_bin, strand, count, count / motif_count))

        logger.info('Done in {}'.format(humanize_time(time.time() - job_start)))
    except KeyboardInterrupt:
        print('Keyboard interrupt received. Stopping...', file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        logger.error(e)
        traceback.print_exc(file=sys.stderr)
        sys.exit()


if __name__ == '__main__':
    make_cut_matrix(parse_arguments())
